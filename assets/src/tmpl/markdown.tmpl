<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv='cache-control' content='no-cache'>
		<meta http-equiv='expires' content='0'>
		<meta http-equiv='pragma' content='no-cache'>
		<link href="/.httpServe/markdown/css/github.min.css" rel="stylesheet">
		<link href="/.httpServe/markdown/css/highlight.min.css" rel="stylesheet">
		<link href="{{.css}}?r={{.rand}}" rel="stylesheet">

		<script src="/.httpServe/markdown/js/highlight.min.js"></script>
		<script src="/.httpServe/markdown/js/viz.js"></script>
		<script src="/.httpServe/markdown/js/viz-full.render.js"></script>
		<style>
			body {
				margin: 20px 5%;
			}
		</style>
	</head>
	<body class="markdown-body">
		{{.outputHTML}}
	<script>
		//////////////////////
		// Process viz
		////////////////
		let viz = new Viz()

		elList = document.querySelectorAll("code.language-dot,code.dot")
		for (var i = 0; i < elList.length; i++) {
			((el) => {
				var text = el.innerText
				el.innerHTML = "<i>rendering dot...</i>" // why not showing?
				viz.renderSVGElement(text)
					.then(function(element) {
						var div = document.createElement('div')
						div.appendChild(element)

						el.parentNode.parentNode.replaceChild(div, el.parentNode)
					}).catch( error => {
						viz = new Viz() // Some caveat on viz
					})
			})(elList[i])
		}

		elList = document.querySelectorAll("code.language-dot_png,code.dot_png")
		for (var i = 0; i < elList.length; i++) {
			((el) => {
				var text = el.innerText
				el.innerHTML = "<i>rendering dot...</i>" // why not showing?
				viz.renderImageElement(text, {mimeType:'image/png'})
					.then(function(element) {
						el.parentNode.parentNode.replaceChild(element, el.parentNode)
					}).catch( error => {
						viz = new Viz() // Some caveat on viz
					})
			})(elList[i])
		}
		hljs.initHighlightingOnLoad();

		// Request D2 from the server
		elList = document.querySelectorAll("code.language-d2,code.d2")
		for (var i = 0; i< elList.length; i++) {
			((el) => {
				var text = el.innerText
				el.innerHTML = "<i>rendering d2...</i>"
				fetch('/.httpServe/d2', { method: 'POST', body: text })
					.then(response => response.text())
					.then(svg => {
						var t = document.createElement('t')
						t.innerHTML = svg
						var div = document.createElement('div')
						div.appendChild(t.firstElementChild.firstElementChild)
						el.parentNode.parentNode.replaceChild(div, el.parentNode)
					})
					.catch( error => {
						console.log(error)
					})
			})(elList[i])
		}
	</script>
	<script src="/.httpServe/js/watcher.js"></script>
	</body>
</html>
